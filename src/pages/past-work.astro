---
import Layout from '../layouts/Layout.astro';

const API_BASE_URL = 'https://qusbot.onrender.com';

interface VideoData {
  type?: string;
  youtube_id?: string;
  url?: string;
  thumbnail?: string;
}

interface PortfolioProject {
  added_at?: string;
  added_by?: string;
  name: string;
  video?: string;
  description?: string;
  id?: number;
  video_data?: VideoData;
}

interface VideoItem {
  id: string;
  title: string;
  description: string;
  type: string;
  url?: string;
  thumbnail?: string;
}

let youtubeVideos: VideoItem[] = [];

try {
  const response = await fetch(`${API_BASE_URL}/api/past-work`);
  const data = await response.json();
  
  if (data.success && data.past_work) {
    youtubeVideos = data.past_work.map((project: PortfolioProject, index: number) => {
      let youtubeId: string | null = null;
      const videoUrl = project.video;
      
      if (videoUrl) {
        if (videoUrl.includes('youtube.com/watch?v=')) {
          const match = videoUrl.match(/[?&]v=([^&]+)/);
          if (match) {
            youtubeId = match[1];
            if (youtubeId.includes('&')) {
              youtubeId = youtubeId.split('&')[0];
            }
          }
        } else if (videoUrl.includes('youtu.be/')) {
          const match = videoUrl.match(/youtu\.be\/([^?&]+)/);
          youtubeId = match ? match[1] : null;
        }
      }
      
      return {
        id: youtubeId || `project-${index}`,
        title: project.name || "Portfolio Project",
        description: project.description || 'Portfolio project showcase',
        type: 'youtube',
        url: videoUrl || null,
        thumbnail: null
      };
    });
  }
} catch (error) {
  console.error('Failed to fetch portfolio data:', error);
  youtubeVideos = [];
}
---

<Layout title="Past Work - Qustreso Studios" description="Explore my portfolio of successful Roblox projects and game development work." currentPage="past-work">
  
  <section class="pt-24 pb-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl sm:text-5xl font-bold text-white mb-6">
          My <span class="bg-gradient-to-r from-primary-400 to-secondary-400 bg-clip-text text-transparent">Portfolio</span>
        </h1>
        <p class="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
          A showcase of my best work in Roblox development, from complete games to custom systems and assets.
        </p>
      </div>
    </div>
  </section>

  <section class="py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="portfolio-grid">
        {youtubeVideos.map((video: VideoItem) => (
          <div class="project-card group" data-video-id={video.id}>
            <div class="project-video">
              {video.type === 'youtube' && video.id && !video.id.startsWith('project-') ? (
                <iframe 
                  src={`https://www.youtube.com/embed/${video.id}`}
                  title={video.title}
                  class="w-full h-48 rounded-t-lg"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen>
                </iframe>
              ) : video.type === 'direct' && video.url ? (
                <video 
                  class="w-full h-48 rounded-t-lg object-cover"
                  controls
                  preload="metadata"
                >
                  <source src={video.url} type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              ) : video.thumbnail ? (
                <img 
                  src={video.thumbnail}
                  alt={video.title}
                  class="w-full h-48 rounded-t-lg object-cover"
                />
              ) : (
                <div class="w-full h-48 rounded-t-lg bg-gray-800 flex items-center justify-center">
                  <span class="text-gray-400">No preview available</span>
                </div>
              )}
            </div>
            <div class="project-content">
              <h3 class="project-title">{video.title}</h3>
              <p class="project-description">
                {video.description}
              </p>
              <div class="project-stats">
                <span class="stat">Portfolio</span>
                <span class="stat">HD Quality</span>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {youtubeVideos.length === 0 && (
        <div class="text-center py-16" id="empty-state">
          <p class="text-xl text-gray-400">No portfolio projects available at the moment.</p>
        </div>
      )}
    </div>
  </section>

  <section class="py-16">
    <div class="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
      <h2 class="text-4xl font-bold text-white mb-6">Want to See More?</h2>
      <p class="text-xl text-gray-300 mb-8">
        Check out my YouTube channel for more development content, tutorials, and project showcases.
      </p>
      <a href="https://www.youtube.com/@QUSTRESO" target="_blank" class="btn-primary">
        <span>Visit YouTube Channel</span>
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
        </svg>
      </a>
    </div>
  </section>
</Layout>

<style>
  .btn-primary {
    @apply inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-primary-500 to-secondary-500 text-white font-semibold rounded-lg hover:from-primary-600 hover:to-secondary-600 transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl;
  }
  
  .project-card {
    @apply glass rounded-lg overflow-hidden hover:transform hover:scale-105 transition-all duration-300 border border-gray-600/30 bg-gray-800/50 backdrop-blur-sm shadow-xl hover:shadow-2xl;
  }
  
  .project-video {
    @apply relative overflow-hidden;
  }
  
  .project-content {
    @apply p-6;
  }
  
  .project-title {
    @apply text-xl font-semibold text-white mb-3;
  }
  
  .project-description {
    @apply text-gray-400 mb-4 leading-relaxed;
  }
  
  .project-stats {
    @apply flex gap-2;
  }
  
  .stat {
    @apply px-3 py-1 bg-primary-500/20 text-primary-400 text-xs font-medium rounded-full;
  }
</style>

<script>
  const API_BASE = 'https://qusbot.onrender.com';
  let lastDataHash = '';
  
  interface VideoData {
    type?: string;
    youtube_id?: string;
    url?: string;
    thumbnail?: string;
  }
  
  interface PortfolioProject {
    added_at?: string;
    added_by?: string;
    name: string;
    video?: string;
    description?: string;
    id?: number;
    video_data?: VideoData;
  }
  
  function hashData(data: any): string {
    return JSON.stringify(data).split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0).toString();
  }
  
  function createProjectCard(project: PortfolioProject, index: number): string {
    let youtubeId: string | null = null;
    const videoUrl = project.video;
    
    if (videoUrl) {
      if (videoUrl.includes('youtube.com/watch?v=')) {
        const match = videoUrl.match(/[?&]v=([^&]+)/);
        if (match) {
          youtubeId = match[1];
          if (youtubeId.includes('&')) {
            youtubeId = youtubeId.split('&')[0];
          }
        }
      } else if (videoUrl.includes('youtu.be/')) {
        const match = videoUrl.match(/youtu\.be\/([^?&]+)/);
        youtubeId = match ? match[1] : null;
      }
    }
    
    let videoHTML = '';
    if (youtubeId) {
      videoHTML = `
        <iframe 
          src="https://www.youtube.com/embed/${youtubeId}"
          title="${project.name}"
          class="w-full h-48 rounded-t-lg"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen>
        </iframe>
      `;
    } else if (videoUrl) {
      videoHTML = `
        <video class="w-full h-48 rounded-t-lg object-cover" controls preload="metadata">
          <source src="${videoUrl}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      `;
    } else {
      videoHTML = `
        <div class="w-full h-48 rounded-t-lg bg-gray-800 flex items-center justify-center">
          <span class="text-gray-400">No preview available</span>
        </div>
      `;
    }
    
    return `
      <div class="project-card group" data-video-id="${youtubeId || `project-${index}`}">
        <div class="project-video">${videoHTML}</div>
        <div class="project-content">
          <h3 class="project-title">${project.name}</h3>
          <p class="project-description">${project.description || 'Portfolio project showcase'}</p>
          <div class="project-stats">
            <span class="stat">Portfolio</span>
            <span class="stat">HD Quality</span>
          </div>
        </div>
      </div>
    `;
  }
  
  function updateGrid(projects: PortfolioProject[]): void {
    const grid = document.getElementById('portfolio-grid');
    const emptyState = document.getElementById('empty-state');
    
    if (!grid) return;
    
    if (projects.length === 0) {
      grid.innerHTML = '';
      if (emptyState) emptyState.style.display = 'block';
      return;
    }
    
    if (emptyState) emptyState.style.display = 'none';
    grid.innerHTML = projects.map((project, index) => createProjectCard(project, index)).join('');
  }
  
  async function checkForUpdates(): Promise<void> {
    try {
      const response = await fetch(`${API_BASE}/api/past-work`);
      const data = await response.json();
      
      if (data.success && data.past_work) {
        const currentHash = hashData(data.past_work);
        
        if (lastDataHash && lastDataHash !== currentHash) {
          console.log('New content detected, updating page...');
          updateGrid(data.past_work);
          
          const notification = document.createElement('div');
          notification.textContent = 'New portfolio items added!';
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(to right, #3b82f6, #8b5cf6);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-weight: 600;
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            z-index: 9999;
            animation: slideIn 0.3s ease-out;
          `;
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => notification.remove(), 300);
          }, 3000);
        }
        
        lastDataHash = currentHash;
      }
    } catch (error) {
      console.error('Failed to check for updates:', error);
    }
  }
  
  async function updateContent(): Promise<void> {
    try {
      const response = await fetch(`${API_BASE}/api/past-work`);
      const data = await response.json();
      
      if (data.success && data.past_work && data.past_work.length > 0) {
        lastDataHash = hashData(data.past_work);
        updateGrid(data.past_work);
      }
    } catch (error) {
      console.error('Failed to update portfolio content:', error);
    }
  }
  
  document.addEventListener('DOMContentLoaded', function(): void {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      @keyframes slideOut {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
    
    updateContent();
    setInterval(checkForUpdates, 5000);
    
    document.addEventListener('visibilitychange', function(): void {
      if (!document.hidden) {
        checkForUpdates();
      }
    });
  });
</script>
