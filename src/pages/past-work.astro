---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Past Work - Qustreso Studios" description="Explore my portfolio of successful Roblox projects and game development work." currentPage="past-work">
  
  <section class="pt-24 pb-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl sm:text-5xl font-bold text-white mb-6">
          My <span class="bg-gradient-to-r from-primary-400 to-secondary-400 bg-clip-text text-transparent">Portfolio</span>
        </h1>
        <p class="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
          A showcase of my best work in Roblox development, from complete games to custom systems and assets.
        </p>
      </div>
    </div>
  </section>

  <section class="py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div id="loading-state" class="text-center py-16">
        <div class="inline-block h-12 w-12 animate-spin rounded-full border-4 border-solid border-primary-400 border-r-transparent"></div>
        <p class="text-xl text-gray-400 mt-4">Loading portfolio...</p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 hidden" id="portfolio-grid"></div>
      
      <div class="text-center py-16 hidden" id="empty-state">
        <p class="text-xl text-gray-400">No portfolio projects available at the moment.</p>
      </div>
    </div>
  </section>

  <section class="py-16">
    <div class="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8">
      <h2 class="text-4xl font-bold text-white mb-6">Want to See More?</h2>
      <p class="text-xl text-gray-300 mb-8">
        Check out my YouTube channel for more development content, tutorials, and project showcases.
      </p>
      <a href="https://www.youtube.com/@QUSTRESO" target="_blank" class="btn-primary">
        <span>Visit YouTube Channel</span>
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
        </svg>
      </a>
    </div>
  </section>
</Layout>

<style>
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
  
  .btn-primary {
    @apply inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-primary-500 to-secondary-500 text-white font-semibold rounded-lg hover:from-primary-600 hover:to-secondary-600 transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl;
  }
  
  .project-card {
    @apply glass rounded-lg overflow-hidden hover:transform hover:scale-105 transition-all duration-300 border border-gray-600/30 bg-gray-800/50 backdrop-blur-sm shadow-xl hover:shadow-2xl;
  }
  
  .project-video {
    @apply relative overflow-hidden;
  }
  
  .project-content {
    @apply p-6;
  }
  
  .project-title {
    @apply text-xl font-semibold text-white mb-3;
  }
  
  .project-description {
    @apply text-gray-400 mb-4 leading-relaxed;
  }
  
  .project-stats {
    @apply flex gap-2;
  }
  
  .stat {
    @apply px-3 py-1 bg-primary-500/20 text-primary-400 text-xs font-medium rounded-full;
  }
</style>

<script>
  const API_BASE = 'https://qusbot.onrender.com';
  let currentDataHash = '';
  let pollInterval: number;
  
  interface VideoData {
    type?: string;
    youtube_id?: string;
    url?: string;
    thumbnail?: string;
  }
  
  interface PortfolioProject {
    added_at?: string;
    added_by?: string;
    name: string;
    video?: string;
    description?: string;
    id?: number;
    video_data?: VideoData;
  }
  
  function hashData(data: any): string {
    return JSON.stringify(data).split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0).toString();
  }
  
  function extractYouTubeId(url: string): string | null {
    if (!url) return null;
    
    if (url.includes('youtube.com/watch?v=')) {
      const match = url.match(/[?&]v=([^&]+)/);
      if (match) {
        let id = match[1];
        if (id.includes('&')) {
          id = id.split('&')[0];
        }
        return id;
      }
    } else if (url.includes('youtu.be/')) {
      const match = url.match(/youtu\.be\/([^?&]+)/);
      return match ? match[1] : null;
    }
    return null;
  }
  
  function createProjectCard(project: PortfolioProject, index: number): string {
    const youtubeId = extractYouTubeId(project.video || '');
    
    let videoHTML = '';
    if (youtubeId) {
      videoHTML = `
        <iframe 
          src="https://www.youtube.com/embed/${youtubeId}"
          title="${project.name}"
          class="w-full h-48 rounded-t-lg"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen>
        </iframe>
      `;
    } else if (project.video) {
      videoHTML = `
        <video class="w-full h-48 rounded-t-lg object-cover" controls preload="metadata">
          <source src="${project.video}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      `;
    } else {
      videoHTML = `
        <div class="w-full h-48 rounded-t-lg bg-gray-800 flex items-center justify-center">
          <span class="text-gray-400">No preview available</span>
        </div>
      `;
    }
    
    return `
      <div class="project-card group" data-video-id="${youtubeId || `project-${index}`}">
        <div class="project-video">${videoHTML}</div>
        <div class="project-content">
          <h3 class="project-title">${project.name}</h3>
          <p class="project-description">${project.description || 'Portfolio project showcase'}</p>
          <div class="project-stats">
            <span class="stat">Portfolio</span>
            <span class="stat">HD Quality</span>
          </div>
        </div>
      </div>
    `;
  }
  
  function renderProjects(projects: PortfolioProject[], isUpdate = false): void {
    const grid = document.getElementById('portfolio-grid');
    const emptyState = document.getElementById('empty-state');
    const loadingState = document.getElementById('loading-state');
    
    if (!grid) return;
    
    if (loadingState) {
      loadingState.classList.add('hidden');
    }
    
    if (projects.length === 0) {
      grid.classList.add('hidden');
      if (emptyState) {
        emptyState.classList.remove('hidden');
      }
      return;
    }
    
    if (emptyState) {
      emptyState.classList.add('hidden');
    }
    
    grid.classList.remove('hidden');
    grid.innerHTML = projects.map((project, index) => createProjectCard(project, index)).join('');
    
    if (isUpdate) {
      showNotification('Portfolio updated with new content!');
    }
  }
  
  function showNotification(message: string): void {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(to right, #3b82f6, #8b5cf6);
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-weight: 600;
      box-shadow: 0 10px 25px rgba(0,0,0,0.2);
      z-index: 9999;
      animation: slideIn 0.3s ease-out;
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease-in';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
  
  async function fetchPortfolioData(showUpdate = false): Promise<void> {
    try {
      const response = await fetch(`${API_BASE}/api/past-work`);
      const data = await response.json();
      
      if (data.success && data.past_work) {
        const newHash = hashData(data.past_work);
        
        if (!currentDataHash) {
          currentDataHash = newHash;
          renderProjects(data.past_work, false);
        } else if (currentDataHash !== newHash) {
          currentDataHash = newHash;
          renderProjects(data.past_work, showUpdate);
        }
      }
    } catch (error) {
      console.error('Failed to fetch portfolio data:', error);
      const loadingState = document.getElementById('loading-state');
      const emptyState = document.getElementById('empty-state');
      
      if (loadingState && !currentDataHash) {
        loadingState.classList.add('hidden');
        if (emptyState) {
          emptyState.classList.remove('hidden');
        }
      }
    }
  }
  
  document.addEventListener('DOMContentLoaded', function(): void {
    fetchPortfolioData(false);
    
    pollInterval = window.setInterval(() => {
      fetchPortfolioData(true);
    }, 3000);
    
    document.addEventListener('visibilitychange', function(): void {
      if (document.hidden) {
        clearInterval(pollInterval);
      } else {
        fetchPortfolioData(true);
        pollInterval = window.setInterval(() => {
          fetchPortfolioData(true);
        }, 3000);
      }
    });
    
    window.addEventListener('focus', function(): void {
      fetchPortfolioData(true);
    });
  });
</script>
